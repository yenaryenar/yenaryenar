# .github/workflows/update-pr-list.yml
name: Update PR List

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  update-pr-list:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Update PR List
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EXCLUDED_USERS: "dependabot,renovate,github-actions,bot,mtudy,yenaryenar"
      run: |
        cat > update-prs.js << 'SCRIPT_END'
        const https = require('https');
        const fs = require('fs');
        
        const token = process.env.GITHUB_TOKEN;
        const excludedUsers = process.env.EXCLUDED_USERS.split(',').map(u => u.trim());
        const ITEMS_PER_PAGE = 10;
        
        function makeRequest(path) {
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.github.com',
              path: path,
              headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'PR-List-Updater'
              }
            };
            
            https.get(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  resolve(JSON.parse(data));
                } catch (e) {
                  reject(e);
                }
              });
            }).on('error', reject);
          });
        }
        
        async function getAllPRs() {
          try {
            const username = process.env.GITHUB_REPOSITORY.split('/')[0];
            
            const mergedPRs = await makeRequest(`/search/issues?q=type:pr+author:${username}+is:merged&sort=updated&order=desc&per_page=100`);
            const openPRs = await makeRequest(`/search/issues?q=type:pr+author:${username}+is:open&sort=updated&order=desc&per_page=50`);
            
            const allPRs = [...openPRs.items, ...mergedPRs.items];
            
            const filteredPRs = allPRs.filter(pr => {
              const repoOwner = pr.repository_url.split('/').slice(-2)[0];
              return !excludedUsers.includes(repoOwner);
            });
            
            const uniquePRs = filteredPRs.filter((pr, index, self) => 
              index === self.findIndex(p => p.id === pr.id)
            );
            
            uniquePRs.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
            
            return uniquePRs;
          } catch (error) {
            console.error('Error fetching PRs:', error);
            return [];
          }
        }
        
        function generatePRCard(pr) {
          const repo = pr.repository_url.split('/').slice(-2).join('/');
          const date = new Date(pr.updated_at).toISOString().split('T')[0];
          const status = pr.state === 'open' ? '🟢 Open' : '✅ Merged';
          const shortBody = pr.body && pr.body.trim() ? 
            (pr.body.length > 100 ? pr.body.substring(0, 100) + '...' : pr.body) : '';
          
          return `## ${status} [${pr.title}](${pr.html_url})
**Repository:** \`${repo}\`  
**Updated:** ${date}  
${shortBody ? `**Description:** ${shortBody}  ` : ''}

---

`;
        }
        
        function createPagedMarkdown(allPRs, page, itemsPerPage) {
          const startIndex = (page - 1) * itemsPerPage;
          const endIndex = startIndex + itemsPerPage;
          const pagePRs = allPRs.slice(startIndex, endIndex);
          const totalPages = Math.ceil(allPRs.length / itemsPerPage);
          
          let markdown = `# 📋 Pull Requests - Page ${page}\n\n`;
          markdown += `총 ${allPRs.length}개의 PR (${startIndex + 1}-${Math.min(endIndex, allPRs.length)})\n\n`;
          
          // 네비게이션
          let nav = '**페이지:** ';
          if (page > 1) nav += `[← 이전](page-${page-1}.md) | `;
          nav += `**${page}**`;
          if (page < totalPages) nav += ` | [다음 →](page-${page+1}.md)`;
          nav += '\n\n';
          markdown += nav;
          
          // PR 목록
          pagePRs.forEach(pr => {
            markdown += generatePRCard(pr);
          });
          
          // 하단 네비게이션
          markdown += '\n---\n\n';
          markdown += nav;
          markdown += `\n*Last updated: ${new Date().toISOString().split('T')[0]}*\n`;
          
          return markdown;
        }
        
        async function main() {
          const allPRs = await getAllPRs();
          const totalPages = Math.ceil(allPRs.length / ITEMS_PER_PAGE);
          
          // 메인 README.md (첫 페이지)
          let mainMarkdown = '# 📋 Pull Requests\n\n';
          mainMarkdown += `총 ${allPRs.length}개의 PR\n\n`;
          
          const firstPagePRs = allPRs.slice(0, ITEMS_PER_PAGE);
          firstPagePRs.forEach(pr => {
            mainMarkdown += generatePRCard(pr);
          });
          
          // 더 보기 링크
          if (allPRs.length > ITEMS_PER_PAGE) {
            mainMarkdown += `\n**[→ 더 많은 PR 보기 (${allPRs.length - ITEMS_PER_PAGE}개 더)](more.md)** | `;
            for (let i = 2; i <= Math.min(totalPages, 5); i++) {
              mainMarkdown += `[${i}페이지](page-${i}.md) `;
            }
            if (totalPages > 5) mainMarkdown += `... [${totalPages}페이지](page-${totalPages}.md)`;
            mainMarkdown += '\n';
          }
          
          mainMarkdown += `\n*Last updated: ${new Date().toISOString().split('T')[0]}*\n`;
          fs.writeFileSync('README.md', mainMarkdown);
          
          // more.md (전체 목록)
          let moreMarkdown = '# 📋 All Pull Requests\n\n';
          moreMarkdown += `[← 메인으로 돌아가기](README.md)\n\n`;
          moreMarkdown += `총 ${allPRs.length}개의 PR\n\n`;
          
          // 페이지 링크들
          if (totalPages > 1) {
            moreMarkdown += '**페이지:** ';
            for (let i = 1; i <= totalPages; i++) {
              if (i === 1) {
                moreMarkdown += `[1페이지](README.md) `;
              } else {
                moreMarkdown += `[${i}페이지](page-${i}.md) `;
              }
            }
            moreMarkdown += '\n\n---\n\n';
          }
          
          allPRs.forEach(pr => {
            moreMarkdown += generatePRCard(pr);
          });
          
          moreMarkdown += `\n*Last updated: ${new Date().toISOString().split('T')[0]}*\n`;
          fs.writeFileSync('more.md', moreMarkdown);
          
          // 개별 페이지들 생성 (2페이지부터)
          for (let page = 2; page <= totalPages; page++) {
            const pageMarkdown = createPagedMarkdown(allPRs, page, ITEMS_PER_PAGE);
            fs.writeFileSync(`page-${page}.md`, pageMarkdown);
          }
          
          console.log(`Updated with ${allPRs.length} PRs, ${totalPages} pages`);
        }
        
        main();
        SCRIPT_END
        
        node update-prs.js
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md more.md page-*.md
        git diff --staged --quiet || git commit -m "Update PR list [$(date +'%Y-%m-%d %H:%M')]"
        git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
