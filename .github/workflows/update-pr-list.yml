# .github/workflows/update-pr-list.yml
name: Update PR List

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  update-pr-list:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Update PR List with Pagination
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        EXCLUDED_USERS: "dependabot,renovate,github-actions,bot,mtudy,yenaryenar"
      run: |
        cat << 'EOF' > update-prs.js
        const https = require('https');
        const fs = require('fs');
        
        const token = process.env.GITHUB_TOKEN;
        const excludedUsers = process.env.EXCLUDED_USERS.split(',').map(u => u.trim());
        const ITEMS_PER_PAGE = 10;
        
        function makeRequest(path) {
          return new Promise((resolve, reject) => {
            const options = {
              hostname: 'api.github.com',
              path: path,
              headers: {
                'Authorization': `token ${token}`,
                'User-Agent': 'PR-List-Updater'
              }
            };
            
            https.get(options, (res) => {
              let data = '';
              res.on('data', chunk => data += chunk);
              res.on('end', () => {
                try {
                  resolve(JSON.parse(data));
                } catch (e) {
                  reject(e);
                }
              });
            }).on('error', reject);
          });
        }
        
        async function getAllPRs() {
          try {
            const username = process.env.GITHUB_REPOSITORY.split('/')[0];
            
            // Îçî ÎßéÏùÄ PRÏùÑ Í∞ÄÏ†∏Ïò§Í∏∞ ÏúÑÌï¥ ÌéòÏù¥ÏßÄ Ïàò Ï¶ùÍ∞Ä
            const mergedPRs = await makeRequest(`/search/issues?q=type:pr+author:${username}+is:merged&sort=updated&order=desc&per_page=100`);
            const openPRs = await makeRequest(`/search/issues?q=type:pr+author:${username}+is:open&sort=updated&order=desc&per_page=50`);
            
            const allPRs = [...openPRs.items, ...mergedPRs.items];
            
            // Ï†úÏô∏Ìï† ÏÇ¨Ïö©ÏûêÏùò Ï†ÄÏû•ÏÜå ÌïÑÌÑ∞ÎßÅ
            const filteredPRs = allPRs.filter(pr => {
              const repoOwner = pr.repository_url.split('/').slice(-2)[0];
              return !excludedUsers.includes(repoOwner);
            });
            
            // Ï§ëÎ≥µ Ï†úÍ±∞
            const uniquePRs = filteredPRs.filter((pr, index, self) => 
              index === self.findIndex(p => p.id === pr.id)
            );
            
            // ÎÇ†ÏßúÏàú Ï†ïÎ†¨
            uniquePRs.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
            
            return uniquePRs;
          } catch (error) {
            console.error('Error fetching PRs:', error);
            return [];
          }
        }
        
        function generatePRCard(pr) {
          const repo = pr.repository_url.split('/').slice(-2).join('/');
          const date = new Date(pr.updated_at).toISOString().split('T')[0];
          const status = pr.state === 'open' ? 'üü¢ Open' : '‚úÖ Merged';
          const shortBody = pr.body && pr.body.trim() ? 
            (pr.body.length > 100 ? pr.body.substring(0, 100) + '...' : pr.body) : '';
          
          return `
## ${status} [${pr.title}](${pr.html_url})
**Repository:** \`${repo}\`  
**Updated:** ${date}  
${shortBody ? `**Description:** ${shortBody}  ` : ''}

---
`;
        }
        
        function generateHTML(allPRs) {
          const totalPages = Math.ceil(allPRs.length / ITEMS_PER_PAGE);
          
          return `<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Pull Requests</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; background: #0d1117; color: #c9d1d9; }
    .container { max-width: 800px; margin: 0 auto; }
    .pr-card { background: #161b22; border: 1px solid #30363d; border-radius: 8px; padding: 20px; margin: 20px 0; }
    .pr-title { font-size: 18px; font-weight: 600; margin-bottom: 10px; }
    .pr-title a { color: #58a6ff; text-decoration: none; }
    .pr-title a:hover { text-decoration: underline; }
    .pr-meta { color: #8b949e; font-size: 14px; margin-bottom: 10px; }
    .pr-status { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600; }
    .status-open { background: #238636; color: white; }
    .status-merged { background: #8957e5; color: white; }
    .pagination { text-align: center; margin: 40px 0; }
    .page-btn { background: #21262d; border: 1px solid #30363d; color: #c9d1d9; padding: 8px 16px; margin: 0 4px; cursor: pointer; border-radius: 6px; }
    .page-btn:hover { background: #30363d; }
    .page-btn.active { background: #0969da; color: white; }
    .page-info { color: #8b949e; margin: 20px 0; text-align: center; }
    h1 { text-align: center; color: #f0f6fc; margin-bottom: 10px; }
    .subtitle { text-align: center; color: #8b949e; margin-bottom: 40px; }
  </style>
</head>
<body>
  <div class="container">
    <h1>üìã Pull Requests</h1>
    <div class="subtitle">Ï¥ù ${allPRs.length}Í∞úÏùò PR</div>
    
    <div id="pr-container"></div>
    
    <div class="pagination" id="pagination"></div>
    
    <div class="page-info">
      <span id="page-info"></span>
    </div>
  </div>

  <script>
    const allPRs = ${JSON.stringify(allPRs)};
    const itemsPerPage = ${ITEMS_PER_PAGE};
    const totalPages = Math.ceil(allPRs.length / itemsPerPage);
    let currentPage = 1;
    
    function formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('ko-KR');
    }
    
    function renderPRCard(pr) {
      const repo = pr.repository_url.split('/').slice(-2).join('/');
      const status = pr.state === 'open' ? 'Open' : 'Merged';
      const statusClass = pr.state === 'open' ? 'status-open' : 'status-merged';
      const shortBody = pr.body && pr.body.trim() ? 
        (pr.body.length > 100 ? pr.body.substring(0, 100) + '...' : pr.body) : '';
      
      return \`
        <div class="pr-card">
          <div class="pr-title">
            <span class="pr-status \${statusClass}">\${status}</span>
            <a href="\${pr.html_url}" target="_blank">\${pr.title}</a>
          </div>
          <div class="pr-meta">
            <strong>Repository:</strong> \${repo} ‚Ä¢ 
            <strong>Updated:</strong> \${formatDate(pr.updated_at)}
          </div>
          \${shortBody ? \`<div style="color: #8b949e; margin-top: 10px;">\${shortBody}</div>\` : ''}
        </div>
      \`;
    }
    
    function renderPage(page) {
      const start = (page - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      const pageData = allPRs.slice(start, end);
      
      document.getElementById('pr-container').innerHTML = 
        pageData.map(renderPRCard).join('');
      
      document.getElementById('page-info').textContent = 
        \`\${start + 1}-\${Math.min(end, allPRs.length)} of \${allPRs.length} PRs\`;
      
      renderPagination(page);
    }
    
    function renderPagination(currentPage) {
      let paginationHTML = '';
      
      // Ïù¥Ï†Ñ Î≤ÑÌäº
      if (currentPage > 1) {
        paginationHTML += \`<button class="page-btn" onclick="goToPage(\${currentPage - 1})">‚Üê Ïù¥Ï†Ñ</button>\`;
      }
      
      // ÌéòÏù¥ÏßÄ Î≤àÌò∏Îì§
      const startPage = Math.max(1, currentPage - 2);
      const endPage = Math.min(totalPages, currentPage + 2);
      
      if (startPage > 1) {
        paginationHTML += \`<button class="page-btn" onclick="goToPage(1)">1</button>\`;
        if (startPage > 2) paginationHTML += \`<span style="margin: 0 8px;">...</span>\`;
      }
      
      for (let i = startPage; i <= endPage; i++) {
        const activeClass = i === currentPage ? 'active' : '';
        paginationHTML += \`<button class="page-btn \${activeClass}" onclick="goToPage(\${i})">\${i}</button>\`;
      }
      
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) paginationHTML += \`<span style="margin: 0 8px;">...</span>\`;
        paginationHTML += \`<button class="page-btn" onclick="goToPage(\${totalPages})">\${totalPages}</button>\`;
      }
      
      // Îã§Ïùå Î≤ÑÌäº
      if (currentPage < totalPages) {
        paginationHTML += \`<button class="page-btn" onclick="goToPage(\${currentPage + 1})">Îã§Ïùå ‚Üí</button>\`;
      }
      
      document.getElementById('pagination').innerHTML = paginationHTML;
    }
    
    function goToPage(page) {
      currentPage = page;
      renderPage(page);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    // Ï¥àÍ∏∞ Î†åÎçîÎßÅ
    renderPage(1);
  </script>
</body>
</html>`;
        }
        
        async function main() {
          const allPRs = await getAllPRs();
          
          // HTML ÌååÏùº ÏÉùÏÑ±
          const htmlContent = generateHTML(allPRs);
          fs.writeFileSync('index.html', htmlContent);
          
          // Í∏∞Î≥∏ README.mdÎèÑ ÏÉùÏÑ± (Ï≤´ ÌéòÏù¥ÏßÄÎßå)
          let markdown = '# üìã Pull Requests\n\n';
          markdown += `Ï¥ù ${allPRs.length}Í∞úÏùò PR ([Ï†ÑÏ≤¥ Î≥¥Í∏∞](https://yenaryenar.github.io/yenaryenar/))\n\n`;
          
          const firstPagePRs = allPRs.slice(0, ITEMS_PER_PAGE);
          firstPagePRs.forEach(pr => {
            markdown += generatePRCard(pr);
          });
          
          if (allPRs.length > ITEMS_PER_PAGE) {
            markdown += `\n**[‚Üí Îçî ÎßéÏùÄ PR Î≥¥Í∏∞ (${allPRs.length - ITEMS_PER_PAGE}Í∞ú Îçî)](https://yenaryenar.github.io/yenaryenar/)**\n`;
          }
          
          markdown += `\n*Last updated: ${new Date().toISOString().split('T')[0]}*\n`;
          
          fs.writeFileSync('README.md', markdown);
          console.log(`Updated with ${allPRs.length} PRs, ${Math.ceil(allPRs.length / ITEMS_PER_PAGE)} pages`);
        }
        
        main();
        EOF
        
        node update-prs.js
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md index.html
        git diff --staged --quiet || git commit -m "Update PR list [$(date +'%Y-%m-%d %H:%M')]"
        git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
